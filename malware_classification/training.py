import os

import seaborn as sb
import skops.io as sio
from matplotlib import pyplot as plt
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.metrics import confusion_matrix, f1_score
from sklearn.naive_bayes import MultinomialNB
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier

import preprocessing

plots_dir = os.path.join(os.path.dirname(__file__), 'plots')

classifiers = {
    "Naive Bayes": MultinomialNB(),
    "Gradient Boosting": GradientBoostingClassifier(n_estimators=300, random_state=43),
    "K-Nearest Neighbors": KNeighborsClassifier(),
    "Decision Tree": DecisionTreeClassifier(random_state=43),
    "Random Forest": RandomForestClassifier(n_estimators=200, random_state=43)
}


# noinspection DuplicatedCode
def plot_confusion_matrix(y_true, y_pred, labels, model_name: str):
    m = confusion_matrix(y_true, y_pred, labels=labels)
    ax = sb.heatmap(m, annot=True, cmap='Blues')
    ax.set_title(f'{model_name} Confusion matrix')
    ax.set_xlabel('Predicted Values')
    ax.set_ylabel('True Values')
    ax.set_xticklabels(labels)
    ax.set_yticklabels(labels)
    plt.savefig(os.path.join(plots_dir, f"{model_name}.png"))
    plt.show()


def persist_model(model):
    sio.dump(model, os.path.join(os.path.dirname(__file__), 'model.skops'))


def test_models():
    train, test = preprocessing.get_dataset()

    x_train = train.drop('label', axis=1)
    y_train = train['label']
    x_test = test.drop('label', axis=1)
    y_test = test['label']

    for name, classifier in classifiers.items():
        classifier.fit(x_train, y_train)
        y_pred = classifier.predict(x_test)
        print(f"{name} F1-Score: {f1_score(y_test, y_pred, average='macro')}")
        plot_confusion_matrix(y_test, y_pred, train['label'].unique(), name)

    # persist_model(classifiers["Random Forest"])


if __name__ == '__main__':
    if not os.path.isdir(plots_dir):
        os.mkdir(plots_dir)
    test_models()